# docker-compose.yaml
version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: hair_id_db
    environment:
      POSTGRES_DB: hair_identification
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - hair_id_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Celery
  redis:
    image: redis:7-alpine
    container_name: hair_id_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hair_id_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Django Backend Application
  django:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hair_id_django
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://postgres:postgres123@db:5432/hair_identification
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hair_id_network
    stdin_open: true
    tty: true

  # Celery Worker for Background Tasks
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hair_id_celery
    command: celery -A hair_identification worker --loglevel=info
    volumes:
      - .:/app
      - media_volume:/app/media
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://postgres:postgres123@db:5432/hair_identification
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - db
      - redis
      - django
    networks:
      - hair_id_network

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hair_id_celery_beat
    command: celery -A hair_identification beat --loglevel=info
    volumes:
      - .:/app
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://postgres:postgres123@db:5432/hair_identification
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - db
      - redis
      - django
    networks:
      - hair_id_network

  # Machine Learning Training Environment
  ml-trainer:
    build:
      context: .
      dockerfile: Dockerfile.ml
    container_name: hair_id_ml_trainer
    command: tail -f /dev/null  # Keep container running
    volumes:
      - .:/app
      - ml_models:/app/ml_models
      - media_volume:/app/media
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://postgres:postgres123@db:5432/hair_identification
    depends_on:
      - db
    networks:
      - hair_id_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    profiles:
      - ml  # Only start when needed: docker-compose --profile ml up

  # Next.js Frontend (for later sprints)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hair_id_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
    depends_on:
      - django
    networks:
      - hair_id_network
    profiles:
      - frontend  # Only start when frontend is ready

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: hair_id_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
    depends_on:
      - django
    networks:
      - hair_id_network
    profiles:
      - production  # Only for production deployment

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  ml_models:
    driver: local

networks:
  hair_id_network:
    driver: bridge

# Development Override
# Usage: docker-compose -f docker-compose.yaml -f docker-compose.dev.yaml up